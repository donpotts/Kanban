@page "/tasks"
@inject AppService AppService
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Kanban Tasks & Grid</PageTitle>

<h1>Kanban Tasks (Double Click Task Card to Edit)</h1>

@if (!string.IsNullOrEmpty(loadError))
{
    <p class="text-danger">@loadError</p>
}

<head>
    <link href="_content/Syncfusion.Blazor.Themes/bootstrap5.css" rel="stylesheet" />
    <script src="_content/Syncfusion.Blazor.Core/scripts/syncfusion-blazor.min.js" type="text/javascript"></script>
</head>

<SfKanban ID="k2" TValue="Tasks" KeyField="Status" AllowDragAndDrop="false">
    <KanbanEvents TValue="Tasks" ActionComplete="@ActionCompleteHandler"></KanbanEvents>
    <SfDataManager Url="/odata/Tasks" Adaptor="@Syncfusion.Blazor.Adaptors.ODataV4Adaptor" Headers="headers" />
    <KanbanColumns>
        <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() {"To Do"})"></KanbanColumn>
        <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() {"In Progress"})"></KanbanColumn>
        <KanbanColumn HeaderText="Testing" KeyField="@(new List<string>() {"Testing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Done" KeyField="@(new List<string>() {"Done"})"></KanbanColumn>
    </KanbanColumns>
    <KanbanCardSettings HeaderField="Id" ContentField="Summary"></KanbanCardSettings>
    <KanbanSwimlaneSettings KeyField="Assignee"></KanbanSwimlaneSettings>
</SfKanban>

<div class="mb-3 text-end">
    <NavLink href="tasks/add" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i>
    </NavLink>
</div>

<div class="grid table-responsive">
    <QuickGrid @ref="grid" ItemsProvider="@itemsProvider" Pagination="@pagination" Theme="bootstrap" Class="table">
        <PropertyColumn Title="Id" Property="@(x => x.Id)" Sortable="true" />
        <PropertyColumn Title="Name" Property="@(x => x.Name)" Sortable="true" />
        <PropertyColumn Title="Title" Property="@(x => x.Title)" Sortable="true" />
        <PropertyColumn Title="Status" Property="@(x => x.Status)" Sortable="true" />
        <PropertyColumn Title="Summary" Property="@(x => x.Summary)" Sortable="true" />
        <PropertyColumn Title="Assignee" Property="@(x => x.Assignee)" Sortable="true" />
        <TemplateColumn>
            <button class="btn btn-secondary" @onclick="@(() => RecordClicked(context.Id))">
                <i class="bi bi-pencil-fill"></i>
            </button>
            <button type="button" class="btn btn-danger float-right" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="(() => modalTarget = context)">
                <i class="bi bi-trash-fill"></i>
            </button>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@pagination" />

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="(() => modalTarget = null)"></button>
            </div>
            <div class="modal-body">
                Are you sure you wish to delete this record?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="(() => modalTarget = null)">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="DeleteAsync">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? loadError;
    private Dictionary<string, string> headers = [];

    protected override async Task OnInitializedAsync()
    {
        var authenticationStateProvider = AuthenticationStateProvider as IdentityAuthenticationStateProvider
            ?? throw new InvalidOperationException();

        var token = await authenticationStateProvider.GetBearerTokenAsync()
            ?? throw new Exception("Not authorized");

        headers.Add("Authorization", $"Bearer {token}");

        await base.OnInitializedAsync();
    }

    private QuickGrid<Tasks>? grid;
    private GridItemsProvider<Tasks>? itemsProvider;
    private PaginationState pagination = new() { ItemsPerPage = 10 };

    private Tasks? modalTarget;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override void OnInitialized()
    {
        itemsProvider = async req =>
        {
            var top = req.Count;
            var skip = req.StartIndex;
            var orderby = ODataHelpers.GetOrderBy<Tasks>(req.GetSortByProperties());

            AppService.ODataResult<Tasks>? result = null;

            try
            {
                result = await AppService.ListTasksODataAsync(top, skip, orderby, null, true, null);
            }
            catch (Exception ex)
            {
                loadError = ex.Message;
            }

            return GridItemsProviderResult.From(
                result?.Value?.ToArray() ?? Array.Empty<Tasks>(),
                result?.Count ?? 0);
        };
    }

    private void RecordClicked(long? id)
    {
        if (id == null)
        {
            return;
        }

        Navigation.NavigateTo($"tasks/{id}");
    }

    private async Task DeleteAsync()
    {
        if (modalTarget?.Id == null)
        {
            return;
        }

        var id = (long)modalTarget.Id;

        modalTarget = null;

        loadError = null;
        StateHasChanged();

        try
        {
            await AppService.DeleteTasksAsync(id);
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            StateHasChanged();
            return;
        }

        await grid!.RefreshDataAsync();
    }

    public async void ActionCompleteHandler(ActionEventArgs<Tasks> args)
    {
        await grid!.RefreshDataAsync();
    }
}
